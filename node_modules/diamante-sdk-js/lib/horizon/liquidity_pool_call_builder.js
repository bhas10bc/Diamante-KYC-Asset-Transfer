"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LiquidityPoolCallBuilder = void 0;
var _call_builder = require("./call_builder");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
var LiquidityPoolCallBuilder = exports.LiquidityPoolCallBuilder = function (_CallBuilder) {
  function LiquidityPoolCallBuilder(serverUrl) {
    var _this;
    _classCallCheck(this, LiquidityPoolCallBuilder);
    _this = _callSuper(this, LiquidityPoolCallBuilder, [serverUrl]);
    _this.url.segment("liquidity_pools");
    return _this;
  }
  _inherits(LiquidityPoolCallBuilder, _CallBuilder);
  return _createClass(LiquidityPoolCallBuilder, [{
    key: "forAssets",
    value: function forAssets() {
      for (var _len = arguments.length, assets = new Array(_len), _key = 0; _key < _len; _key++) {
        assets[_key] = arguments[_key];
      }
      var assetList = assets.map(function (asset) {
        return asset.toString();
      }).join(",");
      this.url.setQuery("reserves", assetList);
      return this;
    }
  }, {
    key: "forAccount",
    value: function forAccount(id) {
      this.url.setQuery("account", id);
      return this;
    }
  }, {
    key: "liquidityPoolId",
    value: function liquidityPoolId(id) {
      if (!id.match(/[a-fA-F0-9]{64}/)) {
        throw new TypeError("".concat(id, " does not look like a liquidity pool ID"));
      }
      var builder = new _call_builder.CallBuilder(this.url.clone());
      builder.filter.push([id.toLowerCase()]);
      return builder;
    }
  }]);
}(_call_builder.CallBuilder);